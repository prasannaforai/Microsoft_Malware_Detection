from copy import deepcopy
from collections import OrderedDict, Counter
from nltk.util import ngrams
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

def compute_ngrams(idx, filename, features_dict, PATH):
    
    with open(PATH+filename, 'r') as f:
        bytefile = f.readlines()
        features_dict = deepcopy(features_dict)

        for line in bytefile:
            n_grams_cnt = Counter(map(lambda x : "".join(x), list(ngrams(line[9:].split(), 1)) +\
                                      list(ngrams(line[9:].split(), 2))))
                
            for gram in n_grams_cnt.keys():
                try:
                    features_dict[gram] += n_grams_cnt[gram]
                except KeyError:
                    features_dict['??'] += n_grams_cnt[gram]  
                        
    return (idx, list(features_dict.values()))




# This function plots the confusion matrices given y_i, y_i_hat.
def plot_confusion_matrix(test_y, predict_y):
    
    
    predict_y = predict_y + 1 #prevent 0 indexing
    C = confusion_matrix(test_y, predict_y)
    # C = 9,9 matrix, each cell (i,j) represents number of points of class i are predicted class j
    
    A =(((C.T)/(C.sum(axis=1))).T)
    #divid each element of the confusion matrix with the sum of elements in that column
    
    # C = [[1, 2],
    #     [3, 4]]
    # C.T = [[1, 3],
    #        [2, 4]]
    # C.sum(axis = 1)  axis=0 corresonds to columns and axis=1 corresponds to rows in two diamensional array
    # C.sum(axix =1) = [[3, 7]]
    # ((C.T)/(C.sum(axis=1))) = [[1/3, 3/7]
    #                           [2/3, 4/7]]

    # ((C.T)/(C.sum(axis=1))).T = [[1/3, 2/3]
    #                           [3/7, 4/7]]
    # sum of row elements = 1
    
    B =(C/C.sum(axis=0))
    #divid each element of the confusion matrix with the sum of elements in that row
    # C = [[1, 2],
    #     [3, 4]]
    # C.sum(axis = 0)  axis=0 corresonds to columns and axis=1 corresponds to rows in two diamensional array
    # C.sum(axix =0) = [[4, 6]]
    # (C/C.sum(axis=0)) = [[1/4, 2/6],
    #                      [3/4, 4/6]] 
    plt.figure(figsize=(28, 7), dpi=100)
    
    labels = list(range(1, 10))
    # representing A in heatmap format
    plt.subplot(1, 3, 1)
    sns.heatmap(C, annot=True, cmap='summer_r', fmt=".3f",
                xticklabels=labels, yticklabels=labels, linewidths=0.5)
    plt.xlabel('Predicted Class')
    plt.ylabel('Original Class')
    plt.title("Confusion matrix")
    
    plt.subplot(1, 3, 2)
    sns.heatmap(B, annot=True, cmap='summer_r', fmt=".3f",
                xticklabels=labels, yticklabels=labels, linewidths=0.5)
    plt.xlabel('Predicted Class')
    plt.ylabel('Original Class')
    plt.title("Precision matrix")
    
    plt.subplot(1, 3, 3)
    sns.heatmap(A, annot=True, cmap='summer_r', fmt=".3f",
                xticklabels=labels, yticklabels=labels, linewidths=0.5)
    
    plt.xlabel('Predicted Class')
    plt.ylabel('Original Class')
    plt.title("Recall matrix")
    plt.show()
